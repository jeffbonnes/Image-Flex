AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  s3bucketName:
    Type: String
    Description: Name of the image bucket to be created
    Default: 'your-bucket-name-here'
  cloudFrontCname:
    Type: String
    Description: custom cname of the cloudfront group
    Default: 'images.yourdomain.com.au'
  certArn:
    Type: String
    Description: arn of the certificate for cloudfront
    Default: 'your cert arn'

Resources:
  EdgeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - edgelambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /service-role/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayFullAccess
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-Lambda-S3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - s3:*
              Resource:
                - !GetAtt ImageBucket.Arn
                - !Sub ${ImageBucket.Arn}/*

  OriginAccessId:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub ${AWS::StackName}-OriginAccessId

  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref s3bucketName 
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - "GET"
            AllowedHeaders:
              - "*"

  ImageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImageBucket
      PolicyDocument:
        Id:  !Sub ${AWS::StackName}-images-policy
        Version: 2012-10-17
        Statement:
          -
            Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub ${ImageBucket.Arn}/*
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessId}

  CloudFrontLoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${s3bucketName}-logs
      PublicAccessBlockConfiguration:
        BlockPublicAcls: Yes
        BlockPublicPolicy: Yes
        IgnorePublicAcls: Yes
        RestrictPublicBuckets: Yes
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter         

  UriToS3KeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-UriToS3Key
      AutoPublishAlias: live
      CodeUri: src/UriToS3Key/
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 1
      Role: !GetAtt EdgeLambdaRole.Arn

  GetOrCreateImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetOrCreateImage
      AutoPublishAlias: live
      CodeUri: src/GetOrCreateImage/
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 256
      Timeout: 30
      Role: !GetAtt EdgeLambdaRole.Arn

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref cloudFrontCname
        ViewerCertificate:
          AcmCertificateArn: !Ref certArn
          SslSupportMethod: sni-only

        Comment: !Ref cloudFrontCname
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: true
            QueryStringCacheKeys:
              - w
              - h
            Cookies:
              Forward: none
            Headers:
              - Access-Control-Request-Method
              - Access-Control-Request-Headers
              - Origin
          LambdaFunctionAssociations:
            - EventType: viewer-request
              LambdaFunctionARN: !Ref UriToS3KeyFunction.Version
            - EventType: origin-response
              LambdaFunctionARN: !Ref GetOrCreateImageFunction.Version
          MinTTL: 100
          TargetOriginId: !Ref s3bucketName
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2and3
        Logging:
          Bucket: !GetAtt CloudFrontLoggingBucket.DomainName

        Origins:
          - DomainName: !Sub ${s3bucketName}.s3.amazonaws.com
            Id: !Ref s3bucketName
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessId}
        PriceClass: PriceClass_All

Outputs:
  DistributionDomain:
    Value: !GetAtt Distribution.DomainName
    Description: Cloudfront distribution domain.

  UriToS3KeyFunction:
    Value: !Ref UriToS3KeyFunction
    Description: Lambda function for the Cloudfront viewer-request event.

  GetOrCreateImageFunction:
    Value: !Ref GetOrCreateImageFunction
    Description: Lambda function for the Cloudfront origin-response event.
